-- CREATE DATABASE shirts_db;
-- USE shirts_db;
-- CREATE TABLE shirts (
--     shirt_id    INT         AUTO_INCREMENT,
--     article     VARCHAR(20),
--     color       VARCHAR(20),
--     shirt_size  CHAR(1),
--     last_worn   INT,
--     PRIMARY KEY (shirt_id)
-- );

-- INSERT INTO shirts 
-- (
--     article,
--     color,
--     shirt_size,
--     last_worn
-- )
-- VALUE
-- ('t-shirt', 'white', 'S', 10),
-- ('t-shirt', 'green', 'S', 200),
-- ('polo shirt', 'black', 'M', 10),
-- ('tank top', 'blue', 'S', 50),
-- ('t-shirt', 'pink', 'S', 0),
-- ('polo shirt', 'red', 'M', 5),
-- ('tank top', 'white', 'S', 200),
-- ('tank top', 'blue', 'M', 15);

-- SELECT * FROM shirts;
-- SELECT article, color FROM shirts;
-- SELECT article, color,shirt_size, last_worn 
-- FROM shirts
-- WHERE shirt_size = "M";


-- UPDATE shirts
-- SET shirt_size = "L"
-- WHERE article = "polo shirt";

-- UPDATE shirts
-- SET last_worn = 0
-- WHERE last_worn = 15;

-- UPDATE shirts
-- SET shirt_size = "XS", color = "off white"
-- WHERE color = "white";

-- DELETE FROM shirts
-- WHERE last_worn >= 200;

-- DELETE FROM shirts
-- WHERE article = 'tank top';

-- DELETE FROM shirts;


-----------------------------------------------------------------------------
CREATE TABLE books 
	(
		book_id INT NOT NULL AUTO_INCREMENT,
		title VARCHAR(100),
		author_fname VARCHAR(100),
		author_lname VARCHAR(100),
		released_year INT,
		stock_quantity INT,
		pages INT,
		PRIMARY KEY(book_id)
	);

INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);

SELECT * FROM books
WHERE title LIKE '%stories%';

SELECT title, pages FROM books
ORDER BY pages DESC
LIMIT 1; 

SELECT CONCAT(title, ' - ', released_year) AS summary
FROM books
ORDER BY released_year DESC
LIMIT 3;

SELECT title, author_lname FROM books
WHERE author_lname REGEXP '.* .*';

SELECT title, released_year, stock_quantity
FROM books
ORDER BY stock_quantity, title LIMIT 3;

SELECT title, author_lname
FROM books
ORDER BY author_lname, title;

SELECT UPPER(CONCAT('My favourite author is ', author_fname, ' ', author_lname , '!')) as yell
FROM books
ORDER BY author_lname;

SELECT concat(author_fname, ' ',  author_lname) AS author, 
       Min(released_year) AS firstWork
FROM   books 
GROUP BY author_lname, author_fname
ORDER BY firstWork;

SELECT released_year, AVG(stock_quantity) as yearQuant
FROM books 
GROUP BY released_year;

SELECT COUNT(*)
FROM books;


SELECT COUNT(*) AS releaseNum, released_year
FROM books
GROUP BY released_year;



SELECT SUM(stock_quantity) AS inSTOCK
FROM books;

SELECT AVG(released_year) AS avgReleaseYear, CONCAT(author_lname, " ", author_fname) as author
FROM books
GROUP BY author_lname, author_fname;

SELECT CONCAT(author_lname, " ", author_fname) AS author, MAX(pages)
FROM books
GROUP BY author_lname, author_fname
ORDER BY MAX(pages) DESC LIMIT 1;

SELECT released_year, COUNT(*) AS '# book', AVG(pages) AS 'avg pages'
FROM books
GROUP BY released_year
ORDER BY released_year;

SELECT * FROM books
WHERE released_year < 1980;

SELECT * FROM books
WHERE author_lname IN ('Chabon', 'Eggers');

SELECT * FROM books
WHERE author_lname = 'Lahiri' AND released_year > 2000;

SELECT * FROM books
WHERE pages BETWEEN 100 AND 200;

SELECT * FROM books
WHERE (author_lname LIKE 'C%') OR  (author_lname LIKE 'S%');

SELECT title, author_lname,
	CASE
		WHEN title LIKE '%stories%' THEN "Short Sotries"
		WHEN title LIKE 'Just Kids%' OR title LIKE 'A Heartbreaking Work%' THEN 'Memoir'
		ELSE 'Novel'
	END AS TYPE
FROM books;

SELECT title, author_lname, 
	CASE 
		WHEN COUNT(*) = 1 THEN '1 book'
		ELSE CONCAT(COUNT(*), ' books') 
	END AS COUNT
FROM books
GROUP BY author_lname, author_fname; 

----------------------------------

CREATE TABLE students
(
	id INT AUTO_INCREMENT PRIMARY KEY,
	first_name VARCHAR(20) NOT NULL
);

CREATE TABLE papers
(
	title VARCHAR(50) NOT NULL,
	grade INT NOT NULL,
	student_id INT NOT NULL,
	FOREIGN KEY (student_id) REFERENCES students(id)
);

INSERT INTO students (first_name) VALUES 
('Caleb'), ('Samantha'), ('Raj'), ('Carlos'), ('Lisa');

INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

SELECT students.first_name, papers.title, papers.grade FROM students
INNER JOIN papers ON students.id = papers.student_id
ORDER BY students.first_name;

SELECT students.first_name, papers.title, papers.grade FROM students
LEFT OUTER JOIN papers ON students.id = papers.student_id
ORDER BY students.first_name;

SELECT students.first_name, papers.grade FROM students
LEFT OUTER JOIN papers ON students.id = papers.student_id
ORDER BY students.first_name;

SELECT
    students.first_name,
    IFNULL(papers.title, 'MISSING'),
    IFNULL(papers.grade, 0)
FROM students
LEFT JOIN papers
    ON students.id = papers.student_id;


SELECT students.first_name, IFNULL(AVG(papers.grade), 0) AS average,
	CASE
		WHEN AVG(papers.grade) > 70 THEN "PASSING"
		ELSE "FAILING"
	END AS passing_status
FROM students
LEFT OUTER JOIN papers ON students.id = papers.student_id
GROUP BY students.id
ORDER BY average DESC;


---------------------
CREATE TABLE reviewers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);

CREATE TABLE series(
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    released_year YEAR(4),
    genre VARCHAR(100)
);

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY(series_id) REFERENCES series(id),
    FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
 
 
INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
 
INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);

SELECT series.title, reviews.rating
FROM series 
INNER JOIN reviews ON series.id = reviews.series_id;

SELECT series.title, AVG(reviews.rating) AS avg_rating
FROM series 
INNER JOIN reviews ON series.id = reviews.series_id
GROUP BY series.id
ORDER BY avg_rating;

SELECT title AS unreviewed_series
FROM series
LEFT OUTER JOIN reviews ON series.id = reviews.series_id
WHERE reviews.rating IS NULL;

SELECT series.genre, AVG(reviews.rating) AS avg_rating
FROM series
INNER JOIN reviews ON series.id = reviews.series_id
GROUP BY series.genre
ORDER BY avg_rating;

SELECT reviewers.first_name, reviewers.last_name, COUNT(rating), 
	IFNULL(MIN(rating), 0), 
	IFNULL(MAX(rating), 0),
 	IFNULL(AVG(rating), 0),
	CASE 
		WHEN COUNT(rating) > 0 THEN 'ACTIVE'
		ELSE 'INACTIVE'
	END AS 'UserSTATUS'
FROM reviewers
LEFT OUTER JOIN reviews ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.first_name, reviewers.last_name;

SELECT
	series.title AS 'title',
	reviews.rating AS 'rating',
	CONCAT(reviewers.first_name, ' ', reviewers.last_name) AS 'reviewer'
FROM reviewers
INNER JOIN reviews ON reviewers.id = reviews.reviewer_id
INNER JOIN series ON reviews.series_id = series.id
ORDER BY title; 

SELECT
	series.title AS 'title',
	reviews.rating AS 'rating',
	CONCAT(reviewers.first_name, ' ', reviewers.last_name) AS 'reviewer'
FROM series
INNER JOIN reviews ON series.id = reviews.series_id 
INNER JOIN reviewers ON reviews.reviewer_id = reviewers.id
ORDER BY title; 